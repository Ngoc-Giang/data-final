import pandas as pd
df = pd.DataFrame({'Math': [4, 4, 7, 8, 12, 13, 15, 18, 22, 23, 23, 25],
                   'Eng': [2, 5, 4, 7, 7, 8, 5, 4, 5, 11, 13, 8]})

df.shape
# pd.qcut() chia một cột dữ liệu thành các khoảng giá trị theo phân vị
# bin1 chia khoảng nào, q=5 chia thành 5 khoảng bằng nhau
df['bin1'] = pd.qcut(df['Math'], q=5)
df
# đếm số lần xuất hiện mỗi khoảng trong cột bin1
df['bin1'].value_counts()
df['bin1'] = pd.qcut(df['Math'], q=[0, .2, .4, .6, .8, 1])
df
# phan khoang theo phân vị
# có 30% rơi vào từng 
df['bin2'] = pd.qcut(df['Math'], q=[0, .2, .4, .6, .8, 1])
df
df['bin3'] = pd.qcut(df['Math'],
                           q=[0, .2, .4, .6, .8, 1],
                           labels=['A', 'B', 'C', 'D', 'E'])
df
# phân khoảng theo giá trị
# Inf: vô cực (>8)
df['bin4'] = pd.cut(df['Eng'],
                      bins=[0, 5, 8, float('Inf')],
                      labels=['Bad', 'OK', 'Good'])
df
# đếm phần tử
df['bin4'].value_counts()
# đánh nhãn
import pandas as pd
# SỬ DỤNG list zip
gdp = [11, 22, 33, 44, 55, 66, 77]
countries = ['Spain', 'France', 'Spain', 'Germany', 'France']
df = pd.DataFrame(list(zip(gdp, countries)),
                  columns=['GDP', 'Countries'])
df
# countries: dữ liệu định tính ->mô hình AI sẽ ko hiểu
# sử dụng thư viện sklearn
from sklearn import preprocessing
label_encoder = preprocessing.LabelEncoder()
df['labelCountries']= label_encoder.fit_transform(df['Countries']) 
df
# kỹ thuật vecto
dfOneHotEncoding = pd.get_dummies(df.Countries, prefix='Country')
print(dfOneHotEncoding.head())
df = pd.concat([df, dfOneHotEncoding], axis=1)
df
# encodingencoding
from sklearn.preprocessing import LabelBinarizer
y = LabelBinarizer().fit_transform(df.Countries)
y
# Tranfrom
import pandas as pd

year = [2010,2011,2012,2013,2014,2015]

salaryHCM = [8.5,9.0,10.5,12.0,11.0,10.0]

salaryLA = [5.5,6.0,6.0,5.5,6.0,5.0]
# Lương tb tính theo triệu đồng tại HCM và Long Anh
df = pd.DataFrame(list(zip(year, salaryHCM,salaryLA)),
                  columns=['Year', 'HCM','LA'])
df
# không đưa dữ liệu này vào trực tiếp mô hình học máy-> tràn số
# giá trị lớn nhất của LA
max_la = df['LA'].abs().max()
# giá trị cũ chia giá trị mới
# VD: 5.5/6.0,....
df['macLA'] = df['LA'] / max_la

df
# giá trị lớn nhất của LA
max_la = df['HCM'].abs().max()
# giá trị cũ chia giá trị mới
df['macHCM'] = df['HCM'] / max_la

df
# SỬ DỤNG MaxAbsScaler ->nhanh
# maxabsoluteLA: 6.0, maxabsoluteHCM: 12.0
from sklearn.preprocessing import MaxAbsScaler
scaler = MaxAbsScaler()
scaled = scaler.fit_transform(df[['HCM','LA']])
scaled_df = pd.DataFrame(scaled, columns=df[['HCM','LA']].columns)

print(scaled_df)
# columns=df[['HCM','LA']].columns: DỰA VÀO CỘT NÀY ĐỂ BT
vSc = scaler.transform([[4.5,5.75]])
vSc
# HCM:0.375, LA:0.958
vR = scaler.inverse_transform([[0.5,0.8]])
vR
# HCM 6 triệu 1 tháng, LA 4.8 TRIỆU
min_la = df['LA'].min()
max_la = df['LA'].max()
df['mmcLA'] = (df['LA'] - min_la) / (max_la - min_la)

df
min_la = df['HCM'].min()
max_la = df['HCM'].max()
df['mmcHCM'] = (df['HCM'] - min_la) / (max_la - min_la)

df
# Công thức tính nhanh
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
scaled = scaler.fit_transform(df[['HCM','LA']])
scaled_df = pd.DataFrame(scaled, columns=df[['HCM','LA']].columns)

print(scaled_df)
# GIẢ SỬ ta có luọng7 của hcm va la lần lượt là 12.0 và 4.5
# thì qua scaler bằng bao nhiêu (1 vs 0.5)
# GIẢ SỬ ta có luọng7 của hcm va la lần lượt là 0.8 và 1.8
# hãy cho biết khi scaler thì giá trị là bao nhiêu 
df[['HCM','LA']].describe()
# std: độ lệch chuẩn
# Z-coreLA
mean_la = df['LA'].mean()
std_la = df['LA'].std()
df['zLA'] = (df['LA'] - mean_la) / std_la

df
# Z-core HCM
mean_la = df['HCM'].mean()
std_la = df['HCM'].std()
df['zHCM'] = (df['HCM'] - mean_la) / std_la
df
# Công thức nhanh
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaled = scaler.fit_transform(df[['HCM','LA']])

scaled_df = pd.DataFrame(scaled, columns=df[['HCM','LA']].columns)

print(scaled_df)
# 1 ng thu nhập ở tpHCM vs LA
# ở LA sướng hơn
sV=scaler.transform([[15,12]])
sV
# tranform function: x^2,sqrt,log,signmold,relu,1/x,....
def funcX(x):
    return x*x + 1
df['TransformX'] = funcX(df[["LA"]])
df